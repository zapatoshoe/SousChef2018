package db.app.Person;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


@Service
public class PersonService {
	@Autowired
	private PersonRepository personRepository;

	/**
	 * Returns the Person with corresponding id, null if not found
	 * @param id The id to search for
	 * @return The Person found or null if not found
	 */
	public Person getPerson(Integer id) {
		return personRepository.findOne(id);
	}

	/**
	 * Returns a comprehensive list of all Persons in repository
	 * @return A comprehensive list of all Persons in repository
	 */
	public List<Person> getAllPersons() {
		List<Person> l = new ArrayList<>();
		personRepository.findAll().forEach(l::add);
		return l;
	}

	/**
	 * Inserts the Person into the repository
	 * If the email is in use, does not insert the Person and returns a null Person
	 * @param person The Person to add
	 * @return The Person just added with autogenerated Id or null
	 */
	public Person addPerson(Person person) {
		if(!personRepository.findByEmail(person.getEmail()).isEmpty())	//if the email is already in use, return a null person
			return new Person();
		personRepository.save(person);
		return personRepository.findOne(person.getId());
	}

	/**
	 * Updates the existing person with the new information
	 * @param person The new information
	 * @param id The id of the person
	 */
	public void updatePerson(Person person, Integer id) {
		person.setId(id);
		personRepository.save(person);	//same as add but repository knows to update existing rows
	}

	/**
	 * Removes the Person with specified id from the repository
	 * @param id The id of the Person to remove
	 */
	public void deletePerson(Integer id) {
			personRepository.delete(id);
	}

	/**
	 * Returns true if the specified Person has the correct password
	 * @param person The person in question
	 * @return true if the specified Person has the correct password - false otherwise
	 */
	public boolean validLogin(Person person) {
		Person actual = null;
		actual = personRepository.findOne(person.getId());
		if(actual == null) return false;	//no person found
		if(actual.getPassword().equals(person.getPassword()))	//if they have the same password - good login
			return true;
		return false;
	}

}
